{% include 'header' %}

import XCTest
@testable import {{ module_info.project_name | replace: ' ', '_' | replace: '-', '_' }}

class {{ module_info.name }}ViewModelTests: BaseTests {

    override func setUpWithError() throws {
        try super.setUpWithError()
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDownWithError() throws {
        try super.tearDownWithError()
        // Put teardown code here. This method is called after the invocation of each test method in the class.
    }

    func testPerformAction() {
        let actionHandler = MockActionHandler()
        let viewModel = {{ module_info.name }}ViewModel(performAction: actionHandler.handleAction)
        
        viewModel.perform(action: .viewDidAppear)
        XCTAssertTrue(actionHandler.viewDidAppearCalled, "Expected perform(action:) to trigger viewDidAppear")
    }

    class MockActionHandler {
        var viewDidAppearCalled = false
        
        func handleAction(_ action: {{ module_info.name }}Action) {
            if action == .viewDidAppear {
                viewDidAppearCalled = true
            }
        }
    }
}
