{% include 'header' %}

import UIKit
import SwiftUI

// MARK: - {{ module_info.name }}

protocol {{ module_info.name }}Protocol {

    @ViewBuilder
    func present{{ module_info.name }}ContentView() -> any View
    func present{{ module_info.name }}ViewController() -> UIViewController

}

extension DIResolver: {{ module_info.name }}Protocol {

    func present{{ module_info.name }}ViewController() -> UIViewController {
        let hostController = UIHostingController(rootView: present{{ module_info.name }}ContentView())
        return hostController
    }

    func present{{ module_info.name }}ContentView() -> any View {
        present{{ module_info.name }}ContentView()
    }

    func present{{ module_info.name }}ContentView() -> some View {

        let interactor = {{ module_info.name }}Interactor()
        let wireFrame = {{ module_info.name }}WireFrame(resolver: self)
        let presenter = {{ module_info.name }}Presenter(wireFrame: wireFrame, interactor: interactor)
        let view = {{ module_info.name }}ContentView(presenter: presenter)

        return view
    }

}
